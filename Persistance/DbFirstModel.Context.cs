//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Persistance
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POSDbContext : DbContext
    {
        public POSDbContext()
            : base("name=POSDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activation> Activations { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankAccountLedger> BankAccountLedgers { get; set; }
        public virtual DbSet<BankAccountRegistration> BankAccountRegistrations { get; set; }
        public virtual DbSet<BankBranch> BankBranches { get; set; }
        public virtual DbSet<CardProcessing> CardProcessings { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CreditCustomer> CreditCustomers { get; set; }
        public virtual DbSet<CreditCustomerLedger> CreditCustomerLedgers { get; set; }
        public virtual DbSet<CreditCustomerPayment> CreditCustomerPayments { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<EmailSetting> EmailSettings { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<FundDeposit> FundDeposits { get; set; }
        public virtual DbSet<FundTransfer> FundTransfers { get; set; }
        public virtual DbSet<Invoice_Payment> Invoice_Payment { get; set; }
        public virtual DbSet<Invoice_Product> Invoice_Product { get; set; }
        public virtual DbSet<InvoiceInfo> InvoiceInfoes { get; set; }
        public virtual DbSet<Journal> Journals { get; set; }
        public virtual DbSet<LedgerBook> LedgerBooks { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Party> Parties { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Payment_Withdraw> Payment_Withdraw { get; set; }
        public virtual DbSet<POS_ClosingCash> POS_ClosingCash { get; set; }
        public virtual DbSet<POS_HoldBill> POS_HoldBill { get; set; }
        public virtual DbSet<POS_HoldBillItems> POS_HoldBillItems { get; set; }
        public virtual DbSet<POS_OpeningCash> POS_OpeningCash { get; set; }
        public virtual DbSet<PosPrinterSetting> PosPrinterSettings { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Product_OpeningStock> Product_OpeningStock { get; set; }
        public virtual DbSet<ProductLocation> ProductLocations { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<Purchase_Join> Purchase_Join { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrder_Join> PurchaseOrder_Join { get; set; }
        public virtual DbSet<PurchaseReturn> PurchaseReturns { get; set; }
        public virtual DbSet<PurchaseReturn_Join> PurchaseReturn_Join { get; set; }
        public virtual DbSet<Racking> Rackings { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Sales_Product> Sales_Product { get; set; }
        public virtual DbSet<SalesMan> SalesMen { get; set; }
        public virtual DbSet<Salesman_Commission> Salesman_Commission { get; set; }
        public virtual DbSet<SalesReturn> SalesReturns { get; set; }
        public virtual DbSet<SalesReturn_Join> SalesReturn_Join { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SMSSetting> SMSSettings { get; set; }
        public virtual DbSet<StockAdjustment_Store> StockAdjustment_Store { get; set; }
        public virtual DbSet<StockAdjustment_Warehouse> StockAdjustment_Warehouse { get; set; }
        public virtual DbSet<StockTransfer> StockTransfers { get; set; }
        public virtual DbSet<StockTransfer_Join> StockTransfer_Join { get; set; }
        public virtual DbSet<StockTransfer_Join_W2W> StockTransfer_Join_W2W { get; set; }
        public virtual DbSet<StockTransfer_W2W> StockTransfer_W2W { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierLedgerBook> SupplierLedgerBooks { get; set; }
        public virtual DbSet<TaxMaster> TaxMasters { get; set; }
        public virtual DbSet<TaxType> TaxTypes { get; set; }
        public virtual DbSet<Temp_Stock> Temp_Stock { get; set; }
        public virtual DbSet<Temp_Stock_Company> Temp_Stock_Company { get; set; }
        public virtual DbSet<UnitMaster> UnitMasters { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<Voucher_OtherDetails> Voucher_OtherDetails { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<WarehouseType> WarehouseTypes { get; set; }
    
        public virtual ObjectResult<spGetPOList_Result> spGetPOList(string supplierName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPOList_Result>("spGetPOList", supplierNameParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetPOList1_Result> spGetPOList1(string supplierName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPOList1_Result>("spGetPOList1", supplierNameParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetPOList2_Result> spGetPOList2(Nullable<int> supplierName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierNameParameter = supplierName.HasValue ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPOList2_Result>("spGetPOList2", supplierNameParameter, fromDateParameter, toDateParameter);
        }
    }
}
